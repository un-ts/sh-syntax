// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package processor

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor(in *jlexer.Lexer, out *Word) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Parts":
			if in.IsNull() {
				in.Skip()
				out.Parts = nil
			} else {
				in.Delim('[')
				if out.Parts == nil {
					if !in.IsDelim(']') {
						out.Parts = make([]Node, 0, 1)
					} else {
						out.Parts = []Node{}
					}
				} else {
					out.Parts = (out.Parts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Node
					(v1).UnmarshalEasyJSON(in)
					out.Parts = append(out.Parts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Lit":
			out.Lit = string(in.String())
		case "Pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "End":
			(out.End).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor(out *jwriter.Writer, in Word) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Parts\":"
		out.RawString(prefix[1:])
		if in.Parts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Parts {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Lit\":"
		out.RawString(prefix)
		out.String(string(in.Lit))
	}
	{
		const prefix string = ",\"Pos\":"
		out.RawString(prefix)
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"End\":"
		out.RawString(prefix)
		(in.End).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Word) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Word) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Word) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Word) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor(l, v)
}
func easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor1(in *jlexer.Lexer, out *Stmt) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				in.Delim('[')
				if out.Comments == nil {
					if !in.IsDelim(']') {
						out.Comments = make([]Comment, 0, 0)
					} else {
						out.Comments = []Comment{}
					}
				} else {
					out.Comments = (out.Comments)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Comment
					(v4).UnmarshalEasyJSON(in)
					out.Comments = append(out.Comments, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Cmd":
			if in.IsNull() {
				in.Skip()
				out.Cmd = nil
			} else {
				if out.Cmd == nil {
					out.Cmd = new(Node)
				}
				(*out.Cmd).UnmarshalEasyJSON(in)
			}
		case "Position":
			(out.Position).UnmarshalEasyJSON(in)
		case "Semicolon":
			(out.Semicolon).UnmarshalEasyJSON(in)
		case "Negated":
			out.Negated = bool(in.Bool())
		case "Background":
			out.Background = bool(in.Bool())
		case "Coprocess":
			out.Coprocess = bool(in.Bool())
		case "Redirs":
			if in.IsNull() {
				in.Skip()
				out.Redirs = nil
			} else {
				in.Delim('[')
				if out.Redirs == nil {
					if !in.IsDelim(']') {
						out.Redirs = make([]Redirect, 0, 0)
					} else {
						out.Redirs = []Redirect{}
					}
				} else {
					out.Redirs = (out.Redirs)[:0]
				}
				for !in.IsDelim(']') {
					var v5 Redirect
					(v5).UnmarshalEasyJSON(in)
					out.Redirs = append(out.Redirs, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "End":
			(out.End).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor1(out *jwriter.Writer, in Stmt) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Comments\":"
		out.RawString(prefix[1:])
		if in.Comments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Comments {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Cmd\":"
		out.RawString(prefix)
		if in.Cmd == nil {
			out.RawString("null")
		} else {
			(*in.Cmd).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Position\":"
		out.RawString(prefix)
		(in.Position).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Semicolon\":"
		out.RawString(prefix)
		(in.Semicolon).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Negated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Negated))
	}
	{
		const prefix string = ",\"Background\":"
		out.RawString(prefix)
		out.Bool(bool(in.Background))
	}
	{
		const prefix string = ",\"Coprocess\":"
		out.RawString(prefix)
		out.Bool(bool(in.Coprocess))
	}
	{
		const prefix string = ",\"Redirs\":"
		out.RawString(prefix)
		if in.Redirs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Redirs {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Pos\":"
		out.RawString(prefix)
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"End\":"
		out.RawString(prefix)
		(in.End).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stmt) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stmt) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stmt) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stmt) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor1(l, v)
}
func easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor2(in *jlexer.Lexer, out *Result) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.ParseError = new(ParseError)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file":
			(out.File).UnmarshalEasyJSON(in)
		case "text":
			out.Text = string(in.String())
		case "parseError":
			if in.IsNull() {
				in.Skip()
				out.ParseError = nil
			} else {
				if out.ParseError == nil {
					out.ParseError = new(ParseError)
				}
				(*out.ParseError).UnmarshalEasyJSON(in)
			}
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor2(out *jwriter.Writer, in Result) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"file\":"
		out.RawString(prefix[1:])
		(in.File).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"parseError\":"
		out.RawString(prefix)
		if in.ParseError == nil {
			out.RawString("null")
		} else {
			(*in.ParseError).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Result) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Result) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Result) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Result) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor2(l, v)
}
func easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor3(in *jlexer.Lexer, out *Redirect) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "OpPos":
			(out.OpPos).UnmarshalEasyJSON(in)
		case "Op":
			out.Op = string(in.String())
		case "N":
			if in.IsNull() {
				in.Skip()
				out.N = nil
			} else {
				if out.N == nil {
					out.N = new(Lit)
				}
				(*out.N).UnmarshalEasyJSON(in)
			}
		case "Word":
			if in.IsNull() {
				in.Skip()
				out.Word = nil
			} else {
				if out.Word == nil {
					out.Word = new(Word)
				}
				(*out.Word).UnmarshalEasyJSON(in)
			}
		case "Hdoc":
			if in.IsNull() {
				in.Skip()
				out.Hdoc = nil
			} else {
				if out.Hdoc == nil {
					out.Hdoc = new(Word)
				}
				(*out.Hdoc).UnmarshalEasyJSON(in)
			}
		case "Pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "End":
			(out.End).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor3(out *jwriter.Writer, in Redirect) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"OpPos\":"
		out.RawString(prefix[1:])
		(in.OpPos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Op\":"
		out.RawString(prefix)
		out.String(string(in.Op))
	}
	{
		const prefix string = ",\"N\":"
		out.RawString(prefix)
		if in.N == nil {
			out.RawString("null")
		} else {
			(*in.N).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Word\":"
		out.RawString(prefix)
		if in.Word == nil {
			out.RawString("null")
		} else {
			(*in.Word).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Hdoc\":"
		out.RawString(prefix)
		if in.Hdoc == nil {
			out.RawString("null")
		} else {
			(*in.Hdoc).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Pos\":"
		out.RawString(prefix)
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"End\":"
		out.RawString(prefix)
		(in.End).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Redirect) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Redirect) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Redirect) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Redirect) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor3(l, v)
}
func easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor4(in *jlexer.Lexer, out *Pos) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Offset":
			out.Offset = uint(in.Uint())
		case "Line":
			out.Line = uint(in.Uint())
		case "Col":
			out.Col = uint(in.Uint())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor4(out *jwriter.Writer, in Pos) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Offset\":"
		out.RawString(prefix[1:])
		out.Uint(uint(in.Offset))
	}
	{
		const prefix string = ",\"Line\":"
		out.RawString(prefix)
		out.Uint(uint(in.Line))
	}
	{
		const prefix string = ",\"Col\":"
		out.RawString(prefix)
		out.Uint(uint(in.Col))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pos) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pos) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pos) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pos) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor4(l, v)
}
func easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor5(in *jlexer.Lexer, out *ParseError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "Filename":
			out.Filename = string(in.String())
		case "Text":
			out.Text = string(in.String())
		case "Incomplete":
			out.Incomplete = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor5(out *jwriter.Writer, in ParseError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Pos\":"
		out.RawString(prefix[1:])
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Filename\":"
		out.RawString(prefix)
		out.String(string(in.Filename))
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"Incomplete\":"
		out.RawString(prefix)
		out.Bool(bool(in.Incomplete))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ParseError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ParseError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ParseError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ParseError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor5(l, v)
}
func easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor6(in *jlexer.Lexer, out *Node) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "End":
			(out.End).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor6(out *jwriter.Writer, in Node) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Pos\":"
		out.RawString(prefix[1:])
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"End\":"
		out.RawString(prefix)
		(in.End).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Node) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Node) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Node) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Node) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor6(l, v)
}
func easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor7(in *jlexer.Lexer, out *Lit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ValuePos":
			(out.ValuePos).UnmarshalEasyJSON(in)
		case "ValueEnd":
			(out.ValueEnd).UnmarshalEasyJSON(in)
		case "Value":
			out.Value = string(in.String())
		case "Pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "End":
			(out.End).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor7(out *jwriter.Writer, in Lit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ValuePos\":"
		out.RawString(prefix[1:])
		(in.ValuePos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"ValueEnd\":"
		out.RawString(prefix)
		(in.ValueEnd).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"Pos\":"
		out.RawString(prefix)
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"End\":"
		out.RawString(prefix)
		(in.End).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Lit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Lit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Lit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Lit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor7(l, v)
}
func easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor8(in *jlexer.Lexer, out *File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Stmt":
			if in.IsNull() {
				in.Skip()
				out.Stmt = nil
			} else {
				in.Delim('[')
				if out.Stmt == nil {
					if !in.IsDelim(']') {
						out.Stmt = make([]Stmt, 0, 0)
					} else {
						out.Stmt = []Stmt{}
					}
				} else {
					out.Stmt = (out.Stmt)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Stmt
					(v10).UnmarshalEasyJSON(in)
					out.Stmt = append(out.Stmt, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Last":
			if in.IsNull() {
				in.Skip()
				out.Last = nil
			} else {
				in.Delim('[')
				if out.Last == nil {
					if !in.IsDelim(']') {
						out.Last = make([]Comment, 0, 0)
					} else {
						out.Last = []Comment{}
					}
				} else {
					out.Last = (out.Last)[:0]
				}
				for !in.IsDelim(']') {
					var v11 Comment
					(v11).UnmarshalEasyJSON(in)
					out.Last = append(out.Last, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "End":
			(out.End).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor8(out *jwriter.Writer, in File) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Stmt\":"
		out.RawString(prefix)
		if in.Stmt == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Stmt {
				if v12 > 0 {
					out.RawByte(',')
				}
				(v13).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Last\":"
		out.RawString(prefix)
		if in.Last == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Last {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Pos\":"
		out.RawString(prefix)
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"End\":"
		out.RawString(prefix)
		(in.End).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v File) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v File) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *File) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *File) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor8(l, v)
}
func easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor9(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Hash":
			(out.Hash).UnmarshalEasyJSON(in)
		case "Text":
			out.Text = string(in.String())
		case "Pos":
			(out.Pos).UnmarshalEasyJSON(in)
		case "End":
			(out.End).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor9(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Hash\":"
		out.RawString(prefix[1:])
		(in.Hash).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"Pos\":"
		out.RawString(prefix)
		(in.Pos).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"End\":"
		out.RawString(prefix)
		(in.End).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComUnTsShSyntaxProcessor9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComUnTsShSyntaxProcessor9(l, v)
}
